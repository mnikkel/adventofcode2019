DAY2 = [
    1, 0, 0, 3, 1, 1, 2, 3, 1, 3, 4, 3, 1, 5, 0, 3, 2, 1, 13, 19, 2, 9, 19, 23,
    1, 23, 6, 27, 1, 13, 27, 31, 1, 31, 10, 35, 1, 9, 35, 39, 1, 39, 9, 43, 2,
    6, 43, 47, 1, 47, 5, 51, 2, 10, 51, 55, 1, 6, 55, 59, 2, 13, 59, 63, 2, 13,
    63, 67, 1, 6, 67, 71, 1, 71, 5, 75, 2, 75, 6, 79, 1, 5, 79, 83, 1, 83, 6,
    87, 2, 10, 87, 91, 1, 9, 91, 95, 1, 6, 95, 99, 1, 99, 6, 103, 2, 103, 9,
    107, 2, 107, 10, 111, 1, 5, 111, 115, 1, 115, 6, 119, 2, 6, 119, 123, 1,
    10, 123, 127, 1, 127, 5, 131, 1, 131, 2, 135, 1, 135, 5, 0, 99, 2, 0, 14, 0
]
CODE = [
    3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1001, 92, 74, 224, 1001,
    224, -85, 224, 4, 224, 1002, 223, 8, 223, 101, 1, 224, 224, 1, 223, 224,
    223, 1101, 14, 63, 225, 102, 19, 83, 224, 101, -760, 224, 224, 4, 224, 102,
    8, 223, 223, 101, 2, 224, 224, 1, 224, 223, 223, 1101, 21, 23, 224, 1001,
    224, -44, 224, 4, 224, 102, 8, 223, 223, 101, 6, 224, 224, 1, 223, 224,
    223, 1102, 40, 16, 225, 1102, 6, 15, 225, 1101, 84, 11, 225, 1102, 22, 25,
    225, 2, 35, 96, 224, 1001, 224, -350, 224, 4, 224, 102, 8, 223, 223, 101,
    6, 224, 224, 1, 223, 224, 223, 1101, 56, 43, 225, 101, 11, 192, 224, 1001,
    224, -37, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 4, 224, 1, 223, 224,
    223, 1002, 122, 61, 224, 1001, 224, -2623, 224, 4, 224, 1002, 223, 8, 223,
    101, 7, 224, 224, 1, 223, 224, 223, 1, 195, 87, 224, 1001, 224, -12, 224,
    4, 224, 1002, 223, 8, 223, 101, 5, 224, 224, 1, 223, 224, 223, 1101, 75,
    26, 225, 1101, 6, 20, 225, 1102, 26, 60, 224, 101, -1560, 224, 224, 4, 224,
    102, 8, 223, 223, 101, 3, 224, 224, 1, 223, 224, 223, 4, 223, 99, 0, 0, 0,
    677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105,
    1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999,
    1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1,
    99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0,
    105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225,
    1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 108, 677, 226, 224, 102, 2,
    223, 223, 1006, 224, 329, 1001, 223, 1, 223, 1108, 226, 677, 224, 1002,
    223, 2, 223, 1006, 224, 344, 101, 1, 223, 223, 7, 226, 677, 224, 102, 2,
    223, 223, 1006, 224, 359, 1001, 223, 1, 223, 1007, 226, 677, 224, 1002,
    223, 2, 223, 1006, 224, 374, 1001, 223, 1, 223, 1108, 677, 226, 224, 102,
    2, 223, 223, 1005, 224, 389, 1001, 223, 1, 223, 107, 226, 226, 224, 102, 2,
    223, 223, 1006, 224, 404, 101, 1, 223, 223, 1107, 226, 226, 224, 1002, 223,
    2, 223, 1005, 224, 419, 1001, 223, 1, 223, 1007, 677, 677, 224, 102, 2,
    223, 223, 1006, 224, 434, 101, 1, 223, 223, 1107, 226, 677, 224, 1002, 223,
    2, 223, 1006, 224, 449, 101, 1, 223, 223, 107, 677, 677, 224, 102, 2, 223,
    223, 1005, 224, 464, 1001, 223, 1, 223, 1008, 226, 226, 224, 1002, 223, 2,
    223, 1005, 224, 479, 101, 1, 223, 223, 1007, 226, 226, 224, 102, 2, 223,
    223, 1005, 224, 494, 1001, 223, 1, 223, 8, 677, 226, 224, 1002, 223, 2,
    223, 1005, 224, 509, 1001, 223, 1, 223, 108, 677, 677, 224, 1002, 223, 2,
    223, 1005, 224, 524, 1001, 223, 1, 223, 1008, 677, 677, 224, 102, 2, 223,
    223, 1006, 224, 539, 1001, 223, 1, 223, 7, 677, 226, 224, 1002, 223, 2,
    223, 1005, 224, 554, 101, 1, 223, 223, 1108, 226, 226, 224, 1002, 223, 2,
    223, 1005, 224, 569, 101, 1, 223, 223, 107, 677, 226, 224, 102, 2, 223,
    223, 1005, 224, 584, 101, 1, 223, 223, 8, 226, 226, 224, 1002, 223, 2, 223,
    1005, 224, 599, 101, 1, 223, 223, 108, 226, 226, 224, 1002, 223, 2, 223,
    1006, 224, 614, 1001, 223, 1, 223, 7, 226, 226, 224, 102, 2, 223, 223,
    1006, 224, 629, 1001, 223, 1, 223, 1107, 677, 226, 224, 102, 2, 223, 223,
    1005, 224, 644, 101, 1, 223, 223, 8, 226, 677, 224, 102, 2, 223, 223, 1006,
    224, 659, 1001, 223, 1, 223, 1008, 226, 677, 224, 1002, 223, 2, 223, 1006,
    224, 674, 1001, 223, 1, 223, 4, 223, 99, 226
]


def process_op(modes_with_op):
    op = int(str(modes_with_op)[-2:])
    modes = list(map(int, str(modes_with_op)[:-2]))
    return (op, modes)


def process_parameters(modes, chunk):
    parameter_list = []
    for parameter in chunk:
        if modes:
            parameter_list.append((modes.pop(), parameter))
        else:
            parameter_list.append((0, parameter))
    return parameter_list


def retrieve_parameters(parameters, exe):
    values = []
    for p in parameters:
        if p[0] == 0:
            values.append((p[1], exe[p[1]]))
        else:
            values.append((p[1], p[1]))
    return values


def run_code(exe, input=0):
    i = 0
    while i < len(exe):
        op, modes = process_op(exe[i])
        if op in [1, 2, 7, 8]:
            parameters = process_parameters(modes, exe[i + 1:i + 4])
        elif op in [3, 4]:
            parameters = process_parameters(modes, exe[i + 1:i + 2])
        elif op in [5, 6]:
            parameters = process_parameters(modes, exe[i + 1:i + 3])

        if op == 1:
            a, b, c = retrieve_parameters(parameters, exe)
            exe[c[0]] = a[1] + b[1]
            i += 4
        elif op == 2:
            a, b, c = retrieve_parameters(parameters, exe)
            exe[c[0]] = a[1] * b[1]
            i += 4
        elif op == 3:
            exe[parameters[0][1]] = input
            i += 2
        elif op == 4:
            print(exe[parameters[0][1]])
            i += 2
        elif op == 5:
            a, b = retrieve_parameters(parameters, exe)
            if a[1]:
                i = b[1]
            else:
                i += 3
        elif op == 6:
            a, b = retrieve_parameters(parameters, exe)
            if not a[1]:
                i = b[1]
            else:
                i += 3
        elif op == 7:
            a, b, c = retrieve_parameters(parameters, exe)
            if a[1] < b[1]:
                exe[c[0]] = 1
            else:
                exe[c[0]] = 0
            i += 4
        elif op == 8:
            a, b, c = retrieve_parameters(parameters, exe)
            if a[1] == b[1]:
                exe[c[0]] = 1
            else:
                exe[c[0]] = 0
            i += 4
        elif op == 99:
            return exe[0]


def part1(code):
    code[1] = 12
    code[2] = 2
    return run_code(code)


def part2(code):
    for noun in range(99):
        for verb in range(99):
            code[1] = noun
            code[2] = verb
            if run_code(code.copy()) == 19690720:
                return 100 * noun + verb


#  print(part1(DAY2.copy()))
#  print(part2(DAY2.copy()))
run_code(CODE.copy(), 1)
run_code(CODE.copy(), 5)
